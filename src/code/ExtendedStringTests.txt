/*
 UEXTENSIONS TESTS
 EXTENDED STRING TESTS
 TEST FOR VERSION: v1.15
 v1.4
 LAST EDITED: THURSDAY JANUARY 11, 2024
 COPYRIGHT © TECH SKULL STUDIOS
*/

using Helpers.Extensions;
using NUnit.Framework;
using System;
using System.Threading.Tasks;

namespace UExtensions.Tests
{
    [Category(Category)]
    internal sealed class ExtendedStringTests : VariableTestsBase
    {
        protected override Task RunTests()
        {
            TestNull();
            TestConversions();
            TestFindAll();            
            TestContains();
            TestNullOrWhiteSpace();
            TestIsEmpty();
            TestErasing();
            TestCamelCase();
            TestTrim();
            TestReverse();
            TestMatches();
            TestFormat();

            return Task.CompletedTask;
        }

        void TestNull()
        {
            string s = null;

            Assert.DoesNotThrow(() => s.ToInt());
            Assert.DoesNotThrow(() => s.ToFloat());
            Assert.DoesNotThrow(() => s.FindAll('X'));
            Assert.DoesNotThrow(() => s.ContainsAny("XXX"));
            Assert.DoesNotThrow(() => s.ContainsAll("XXX", "YYY", "ZZZ"));
            Assert.DoesNotThrow(() => s.IsNullOrWhiteSpace());
            Assert.DoesNotThrow(() => s.IsNullOrEmpty());
            Assert.DoesNotThrow(() => s.Erase("value"));
            Assert.DoesNotThrow(() => s.EraseAll("A", "B", "C"));
            Assert.DoesNotThrow(() => s.ToCamelCase());
            Assert.DoesNotThrow(() => s.Trim(0, 0));
            Assert.DoesNotThrow(() => s.Reverse());
            Assert.DoesNotThrow(() => s.Matches(null));
            Assert.DoesNotThrow(() => s.Matches("abc"));
            Assert.DoesNotThrow(() => s.Format("0.00"));

            Assert.AreEqual(0, s.ToInt()); //0
            Assert.AreEqual(0f, s.ToFloat()); //0.0f
            Assert.AreEqual(new int[] { }, s.FindAll('X')); //new int[] { }
            Assert.IsFalse(s.ContainsAny("XXX")); //false
            Assert.IsFalse(s.ContainsAll("XXX", "YYY", "ZZZ")); //false
            Assert.IsTrue(s.IsNullOrWhiteSpace()); //true
            Assert.IsTrue(s.IsNullOrEmpty()); //true
            Assert.AreEqual(string.Empty, s.Erase("value")); //string.Empty
            Assert.AreEqual(string.Empty, s.EraseAll("A", "B", "C")); //string.Empty
            Assert.AreEqual(null, s.ToCamelCase()); //null
            Assert.AreEqual(null, s.Trim(0, 0)); //null
            Assert.AreEqual(null, s.Reverse()); //null
            Assert.IsTrue(s.Matches(null)); //true
            Assert.IsFalse(s.Matches("abc")); //false
            Assert.AreEqual(null, s.Format("0.00")); //null
        }

        void TestConversions()
        {
            //ToFloat
            Assert.AreEqual("5.629".ToFloat(), 5.629f);
            Assert.AreEqual("0.0".ToFloat(), 0.0f);
            Assert.AreEqual("-9".ToFloat(), -9f);

            //ToInt
            Assert.AreEqual("0".ToInt(), 0);
            Assert.AreEqual("23456".ToInt(), 23456);
            Assert.AreEqual("-100".ToInt(), -100);
        }

        void TestFindAll()
        {
            //FindAll
            Assert.Zero("abcd".FindAll('e').Length);
            Assert.Greater("012345".FindAll('2').Length, 0);
            Assert.AreEqual("01X345XX".FindAll('X'), new int[] { 2, 6, 7 });
            Assert.AreEqual("000".FindAll('0'), new int[] { 0, 1, 2 });
            Assert.AreEqual("xyz".FindAll('A'), new int[] { });
        }

        void TestContains()
        {
            //Contains Any
            Assert.IsTrue("123456789".ContainsAny("a", "b", "456"));
            Assert.IsFalse("123456789".ContainsAny("a", "b", "c"));
            Assert.IsFalse("123456789".ContainsAny());
            Assert.IsTrue("12345 The 6789".ContainsAny("The"));

            //Contains All
            Assert.IsFalse("12345 The 6789".ContainsAll("X", "6789", "123"));
            Assert.IsTrue("123456789".ContainsAll("2", "5", "9"));
            Assert.IsFalse("123456789".ContainsAll("2", "5", "9", "0"));
            Assert.IsTrue("123456789".ContainsAll("234", "56789", "78"));
        }

        void TestNullOrWhiteSpace()
        {
            //Is Null Or WhiteSpace
            Assert.IsFalse("xyz".IsNullOrWhiteSpace());
            Assert.IsTrue("".IsNullOrWhiteSpace());
            string s = null;
            Assert.IsTrue(s.IsNullOrWhiteSpace());
        }

        void TestIsEmpty()
        {
            string s = string.Empty;
            Assert.IsTrue(s.IsNullOrEmpty());
            s = "";
            Assert.IsTrue(s.IsNullOrEmpty());
            s = " ";
            Assert.IsFalse(s.IsNullOrEmpty());
        }

        void TestErasing()
        {
            string s = "ABCDEFGABC";
            //Erase
            Assert.AreEqual("DEFG", s.Erase("ABC"));
            Assert.AreEqual("BCDEFGBC", s.Erase("A"));
            Assert.AreEqual("ABCDABC", s.Erase("EFG"));
            Assert.AreEqual("CDEFGC", s.Erase("AB"));

            //Erase All
            Assert.AreEqual("G", s.EraseAll("ABC", "DEF"));
            Assert.AreEqual("EFG", s.EraseAll("A", "B", "C", "D"));
            Assert.AreEqual("", s.EraseAll("AB", "B", "DE", "FG", "CC"));
            Assert.AreEqual(s.Erase("AB"), s.EraseAll("AB", "B"));
        }

        void TestCamelCase()
        {
            Assert.AreEqual("Bing Bong, Bing Ding Dong", "bing bong, bing ding dong".ToCamelCase());
            Assert.AreEqual("Bing Bong, Bing Ding Dong", "bIng BONG, bING dING DONg".ToCamelCase());
            Assert.AreEqual("Bing Bong, Bing Ding Dong", "BING BoNg, biNg DINg doNg".ToCamelCase());
            Assert.AreEqual("This Text Is A Test 12 Bing Bong", "this TEXT is A Test 12 Bing bong".ToCamelCase());
        }

        void TestTrim()
        {
            string s = "!@#$%^&*()";
            Assert.AreEqual("@#$%^&*(", s.Trim(1, 1));
            Assert.AreEqual("#$%^&*", s.Trim(2, 2));
            Assert.AreEqual("$%^&", s.Trim(3, 3));
            Assert.AreEqual("$%^&*()", s.Trim(3, 0));
            Assert.AreEqual("!@#$%^&", s.Trim(0, 3));
        }

        void TestReverse()
        {
            string s = "0123456789";
            string symbols = "!@#$%^&*()";

            Assert.AreEqual(s, s.Reverse().Reverse());
            Assert.AreEqual(symbols, symbols.Reverse().Reverse());
            Assert.AreEqual("9876543210", s.Reverse());
            Assert.AreEqual(")(*&^%$#@!", symbols.Reverse());
        }

        void TestMatches()
        {
            Assert.IsTrue("".Matches(""));
            Assert.IsTrue("abcde".Matches("AbcdE"));
            Assert.IsTrue("ABCDE".Matches("abCDe"));
            Assert.IsTrue("abCDE".Matches("AbCdE"));
            Assert.IsTrue("abcdE".Matches("abcdE"));
            Assert.IsTrue("abc def ghi".Matches("Abc Def Ghi"));
        }

        void TestFormat()
        {
            Assert.AreEqual("The current price is $123.50 per ounce.", "The current price is ${0:F2} per ounce.".Format(123.50f));
            Assert.AreEqual("The temperature is 123�C.", "The temperature is {0}�C.".Format(123f));
            var now = DateTime.Now;
            Assert.AreEqual($"It is now {now:d} at {now:t}", "It is now {0:d} at {0:t}".Format(now));
            Assert.AreEqual("At Banff in January, the temperature was -40 degrees.", "At {0} in {1:MMMM}, the temperature was {2} degrees.".Format("Banff", new DateTime(2024, 1, 1), -40));
            Assert.AreEqual(string.Format("{0}", "1.200"), "{0:F3}".Format(1.200f));
        }
    }
}